OOP:

Object-oriented programming (OOP) is a programming paradigm/style that relies on the concept of classes and objects.
It is used to structure a software program into simple, reusable pieces of code 
using classes, which are used to create individual instances.

The main aim of OOP is to bind the data and the functions together
so that no other part of the code can access that data except that function (wrapped with data).

CLASS:

A class is a blueprint that defines the structure and behaviour of objects because it consists data members and member functions 
which can then be accessed/used by the instance(object of that class)

OBJECT:

An object is an instance of a class,
The object has a state and behaviour that is defined by the class 
and we can create many objects of the same class(with different state/data). 

ENCAPSULATION:

Encapsulation means bundling the data and method within a single unit(class) then we can keep properties and methods private 
inside the class, so they can't be accessible from outside the class. 
some methods can be exposed as a public interface and provide a well-defined interface for interaction.

Why encapsulation?
This helps to protect the data and method from outside interference(it restricts direct access to them).


ABSTRACTION: 

Abstraction is the process of displaying necessary information and hiding the internal details of an application from the user
The application only shows the high-level of abstraction and ignores low-level of abstraction.

INHERITANCE:

Inheritance is when one class inherits/derives the attributes and methods of another class.
The class whose properties and methods are inherited is known as the Parent class. 
The class that inherits the properties from the parent class is the Child class.
Note: we use inheritance for code reusability.

POLYMORPHISM:




There are two types of polymorphism 

1)compile time polymorphism (Early/Static Binding)

2)Run time polymorphism (Late/Dynamic Binding)
ex: Function Overriding and Virtual Function

C++ Function Overriding:

In C++ inheritance, we can have the same function in the base class as well as its derived classes.

When we call the function using an object of the derived class,
the function of the derived class is executed instead of the one in the base class.

So, different functions are executed depending on the object calling the function.

This is known as function overriding in C++. For example,

// C++ program to demonstrate function overriding

#include <iostream>
using namespace std;

class Base {
   public:
    virtual void print() {
        cout << "Base Function" << endl;
    }
};

class Derived : public Base {
   public:
    void print() {
        cout << "Derived Function" << endl;
    }
};

int main() {
    Derived derived1;

    // Call print() function of Derived class
    derived1.print();

    return 0;
}

Output:
Derived Function

Here, we have used a print() function in the Base class and the same function in the Derived class

When we call print() using the Derived object derived1, 
it overrides the print() function of Base by executing the print() function of the Derived class.

It's a runtime polymorphism because the function call is not resolved by the compiler,
but it is resolved in the runtime instead.

To learn more, visit our C++ Function Overriding tutorial.



VIRTUAL FUNCTION:

we may not be able to override functions if we use a pointer of the base class to point to an object of the derived class.
Using virtual functions in the base class ensures that the function can be overridden in these cases.
Thus, virtual functions fall under function overriding. For example,

// C++ program to demonstrate the use of virtual functions

#include <iostream>
using namespace std;

class Base {
   public:
    virtual void print() {
        cout << "Base Function" << endl;
    }
};

class Derived : public Base {
   public:
    void print() {
        cout << "Derived Function" << endl;
    }
};

int main() {
    Derived derived1;

    // pointer of Base type that points to derived1
    Base* base1 = &derived1;

    // calls member function of Derived class
    base1->print();

    return 0;
}

Output:
Derived Function



