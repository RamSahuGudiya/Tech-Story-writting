
Explaining Kubernetes To My Uber Driver


A week ago, I attended Kubecon 2023 in Chicago. 
I read a few blogs and attended some 101 tutorials at the conference,
but still didn’t have a good understanding of the technology. 
The worst part was the last day of the conference - I ordered an Uber to bring me back to my hotel.
My driver asked me “What’s the convention about?” to which I responded “It’s about Kubernetes",
but after some explaining, it was clear I had no idea what I was talking about.

Imagine coming out of a 3 day conference, 
and not being able to describe the technology to your Uber driver. 
Facepalm. So, in an attempt to redeem myself, here’s my reimagined conversation with my Uber driver.

Start of Conversation
Me: Imagine you’re a chef at a busy restaurant kitchen. 
You’ve got a team of chefs working for you, and each one is preparing a different part of the meal - one group for appetizers, 
one for main courses, and another for desserts.
Coordinating these chefs to make sure the meal is served to the customer on time is your job.
You have a picture in your head?

Driver: Got it.

Me: In this scenario, the head chef is Kubernetes.
Just like that head chef needs to manage all the different chefs in the kitchen,
Kubernetes helps manage all the different pieces needed to run your software. 
The official definition of Kubernetes is a “container-orchestration tool”, 
but since the word “container” is pretty abstract here, you can substitute the word “container” for “chef”. 
So Kubernetes would be a "chef orchestration tool".
That way, you can form a picture in your head of your kitchen every time you hear the word.

Driver: Okay, makes sense so far. But what are these containers? I can't keep imagining them as chefs forever.

Me: Yeah good point. So now that you have a picture in your head of your Kubernetes kitchen,
let’s dive into how all the different kitchen roles map to Kubernetes concepts, going from smallest to largest.

Container
The smallest part of this puzzle is the container, and it’s basically any piece of software.
For example, it could be a Node.js web server that hosts a web application, 
or a MongoDB database container to store data (this sentence is more for the engineers reading this blog,
I wouldn’t say this to my Uber driver 😛). In the kitchen,
imagine you’re serving soup and a salad for your appetizer. The soup would be your container. 
The salad would also be its own container.

I know this definition seems a bit arbitrary right now,
but it’ll make more sense once I explain it in the context of the upcoming components.

Pod
In the kitchen, a pod would be the plate/tray that holds your soup and salad.
In Kubernetes, a pod is something that can hold 1 or more containers. 
The reason for this is that containers within a pod can communicate with each other.

For the engineers: as an example, imagine I have a container for a web server and a container for a database in my pod. 
They can communicate with each other over localhost.

As for an appropriate analogy with the kitchen, I can’t really think of anything. 
Imagine some Sausage Party shenanigans where your anthropomorphized soup and salad start chatting to each other. 
But the soup and salad from the appetizer plate can’t talk to the steak and potatoes on the dinner plate
because they are on different plates (aka, different pods don’t share the same network namespace
and therefore can’t communicate with each other.)
